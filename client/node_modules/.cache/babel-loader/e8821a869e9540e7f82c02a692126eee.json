{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\julie\\\\Documents\\\\concordia-bootcamps\\\\final-project\\\\fp\\\\client\\\\src\\\\components\\\\player.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { useSelector } from \"react-redux\";\n\nconst Player = () => {\n  _s();\n\n  const uri = useSelector(state => state.queue.item.uri);\n  const accessToken = useSelector(state => state.auth.token);\n\n  if (!accessToken) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n    name: \"final project\",\n    token: accessToken,\n    showSaveIcon: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Player, \"Z4b1LpgJ84eTZRpDxdogc/ZtxLg=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/julie/Documents/concordia-bootcamps/final-project/fp/client/src/components/player.jsx"],"names":["React","SpotifyPlayer","useSelector","Player","uri","state","queue","item","accessToken","auth","token"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAMC,GAAG,GAAGF,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBH,GAA7B,CAAvB;AACA,QAAMI,WAAW,GAAGN,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACI,IAAN,CAAWC,KAAvB,CAA/B;;AACA,MAAI,CAACF,WAAL,EAAkB;AAChB,WAAO,IAAP;AACD;;AACD,sBACE,QAAC,aAAD;AACE,IAAA,IAAI,EAAC,eADP;AAEE,IAAA,KAAK,EAAEA,WAFT;AAGE,IAAA,YAAY,EAAE;AAHhB;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAbD;;GAAML,M;UACQD,W,EACQA,W;;;KAFhBC,M;AAeN,eAAeA,MAAf","sourcesContent":["import React from \"react\";\r\nimport SpotifyPlayer from \"react-spotify-web-playback\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Player = () => {\r\n  const uri = useSelector((state) => state.queue.item.uri);\r\n  const accessToken = useSelector((state) => state.auth.token);\r\n  if (!accessToken) {\r\n    return null;\r\n  }\r\n  return (\r\n    <SpotifyPlayer\r\n      name=\"final project\"\r\n      token={accessToken}\r\n      showSaveIcon={true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Player;\r\n"]},"metadata":{},"sourceType":"module"}