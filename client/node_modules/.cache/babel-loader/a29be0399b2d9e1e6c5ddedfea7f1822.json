{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\julie\\\\Documents\\\\concordia-bootcamps\\\\final-project\\\\fp\\\\client\\\\src\\\\components\\\\search\\\\search.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { // receiveAlbums,\n// receiveArtists,\nreceiveTracks, searchRequest } from \"../redux/actions/searchActions\";\n\nconst Search = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [value, setValue] = useState();\n  const accessToken = useSelector(state => state.auth.token);\n\n  const handleChange = e => {\n    setValue(e.target.value); //search();\n  };\n\n  const handleclick = () => {\n    setValue(\"\");\n    search();\n  };\n\n  const search = async () => {\n    dispatch(searchRequest());\n    const options = {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    };\n    const query = await fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(value)}&type=track&market=CA`, options);\n    const res = await query.json();\n    console.log(res);\n    const {\n      tracks\n    } = res; // dispatch(receiveAlbums(albums));\n    // dispatch(receiveArtists(artists));\n\n    dispatch(receiveTracks(tracks));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: value,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: search,\n      children: \"search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Search, \"UD22vNMtN3wHsYbrMTK/007r1dQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/julie/Documents/concordia-bootcamps/final-project/fp/client/src/components/search/search.jsx"],"names":["React","useState","useDispatch","useSelector","receiveTracks","searchRequest","Search","dispatch","value","setValue","accessToken","state","auth","token","handleChange","e","target","handleclick","search","options","headers","Authorization","query","fetch","encodeURIComponent","res","json","console","log","tracks"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACE;AACA;AACAC,aAHF,EAIEC,aAJF,QAKO,gCALP;;AAOA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AACA,QAAMS,WAAW,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,KAAvB,CAA/B;;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASR,KAAV,CAAR,CAD0B,CAE1B;AACD,GAHD;;AAKA,QAAMS,WAAW,GAAG,MAAM;AACxBR,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAS,IAAAA,MAAM;AACP,GAHD;;AAKA,QAAMA,MAAM,GAAG,YAAY;AACzBX,IAAAA,QAAQ,CAACF,aAAa,EAAd,CAAR;AACA,UAAMc,OAAO,GAAG;AACdC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASX,WAAY;AAAvC;AADK,KAAhB;AAGA,UAAMY,KAAK,GAAG,MAAMC,KAAK,CACtB,uCAAsCC,kBAAkB,CACvDhB,KADuD,CAEvD,uBAHqB,EAIvBW,OAJuB,CAAzB;AAMA,UAAMM,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAN,EAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAaJ,GAAnB,CAbyB,CAczB;AACA;;AACAlB,IAAAA,QAAQ,CAACH,aAAa,CAACyB,MAAD,CAAd,CAAR;AACD,GAjBD;;AAmBA,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAErB,KAA1B;AAAiC,MAAA,QAAQ,EAAEM;AAA3C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEI,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CAxCD;;GAAMZ,M;UACaJ,W,EAEGC,W;;;KAHhBG,M;AA0CN,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  // receiveAlbums,\r\n  // receiveArtists,\r\n  receiveTracks,\r\n  searchRequest,\r\n} from \"../redux/actions/searchActions\";\r\n\r\nconst Search = () => {\r\n  const dispatch = useDispatch();\r\n  const [value, setValue] = useState();\r\n  const accessToken = useSelector((state) => state.auth.token);\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n    //search();\r\n  };\r\n\r\n  const handleclick = () => {\r\n    setValue(\"\");\r\n    search();\r\n  };\r\n\r\n  const search = async () => {\r\n    dispatch(searchRequest());\r\n    const options = {\r\n      headers: { Authorization: `Bearer ${accessToken}` },\r\n    };\r\n    const query = await fetch(\r\n      `https://api.spotify.com/v1/search?q=${encodeURIComponent(\r\n        value\r\n      )}&type=track&market=CA`,\r\n      options\r\n    );\r\n    const res = await query.json();\r\n    console.log(res);\r\n    const { tracks } = res;\r\n    // dispatch(receiveAlbums(albums));\r\n    // dispatch(receiveArtists(artists));\r\n    dispatch(receiveTracks(tracks));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input type=\"text\" value={value} onChange={handleChange} />\r\n      <button onClick={search}>search</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}